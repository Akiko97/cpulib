var searchIndex = JSON.parse('{\
"cpulib":{"doc":"A CPU emulator library designed to simulate the CPU …","t":"NNNNNNNNNNDNNNNNNNNNNNNNNNNNEENESSDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNIDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLDLLLLLLLLLLLLLLLL","n":["AH","AL","AX","BH","BL","BP","BPL","BX","CH","CL","CPU","CX","DH","DI","DIL","DL","DX","EAX","EBP","EBX","ECX","EDI","EDX","EFLAGS","EIP","ESI","ESP","FLAGS","FLAGSName","GPRName","IP","IPName","MAX","MAX","Memory","R10","R10B","R10D","R10W","R11","R11B","R11D","R11W","R12","R12B","R12D","R12W","R13","R13B","R13D","R13W","R14","R14B","R14D","R14W","R15","R15B","R15D","R15W","R8","R8B","R8D","R8W","R9","R9B","R9D","R9W","RAX","RBP","RBX","RCX","RDI","RDX","RFLAGS","RIP","RSI","RSP","Registers","SI","SIL","SP","SPL","SectionCompatible","Utilities","VecRegName","XMM","YMM","ZMM","abs_diff","abs_diff","add","add","add","add","add_assign","add_assign","as_ref","as_ref","as_u128","as_u128","as_u32","as_u32","as_u64","as_u64","as_usize","as_usize","bit","bit","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","byte","checked_add","checked_add","checked_div","checked_div","checked_mul","checked_mul","checked_neg","checked_neg","checked_pow","checked_pow","checked_rem","checked_rem","checked_sub","checked_sub","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","div","div","div","div","div_assign","div_assign","div_mod","div_mod","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","exp10","exp10","f32_to_u32","f32vec_to_u32vec","f64_to_u64","f64vec_to_u64vec","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_big_endian","from_dec_str","from_dec_str","from_little_endian","from_little_endian","from_str","from_str","from_str_radix","from_str_radix","full_mul","get_bit","get_by_sections","get_by_selector","get_flags_value","get_gpr_size","get_gpr_value","get_ip_value","hash","hash","hash","hash","integer_sqrt","integer_sqrt","into","into","into","into","into","into","into","into","into","into","is_zero","is_zero","leading_zeros","leading_zeros","low_u128","low_u128","low_u32","low_u32","low_u64","low_u64","max_value","max_value","memory","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","one","one","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_sub","overflowing_sub","partial_cmp","partial_cmp","pow","pow","read","read_vec","registers","rem","rem","rem","rem","rem_assign","rem_assign","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_sub","saturating_sub","set_bit","set_by_sections","set_by_selector","set_flags_value","set_gpr_value","set_ip_value","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr_assign","shr_assign","sub","sub","sub","sub","sub_assign","sub_assign","to_big_endian","to_big_endian","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u256","u32_to_f32","u32vec_to_f32vec","u512","u64_to_f64","u64vec_to_f64vec","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write_vec","zero","zero"],"q":[[0,"cpulib"],[535,"core::convert"],[536,"core::option"],[537,"core::cmp"],[538,"alloc::vec"],[539,"core::fmt"],[540,"core::fmt"],[541,"primitive_types"],[542,"uint::uint"],[543,"uint::uint"],[544,"core::marker"],[545,"alloc::string"],[546,"primitive_types"],[547,"core::clone"]],"d":["","","","","","","","","","","Represents the CPU context in the emulator.","","","","","","","","","","","","","","","","","","An enumeration of flag register names for different bit …","An enumeration representing General Purpose Register (GPR) …","","An enumeration of Instruction Pointer register names for …","Maximum value.","Maximum value.","Represents a memory model with segmented memory blocks. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a collection of registers within a simulated …","","","","","A trait alias representing a collection of traits …","Utilities structure.","An enumeration of SIMD (Single Instruction, Multiple Data) …","","","","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","","","","","","","","","Conversion to u128 with overflow checking","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Return if specific bit is set.","Return if specific bit is set.","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","","","","","","","","","Return specific byte.","Return specific byte.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Clears all bits in a specified SIMD register.","","","","","","","","","","","Creates a new CPU context with a default memory base …","","","","","","","","","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","","","","","","","","","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Converts a 32-bit floating point number (<code>f32</code>) to a 32-bit …","Converts a vector of 32-bit floating point numbers (…","Converts a 64-bit floating point number (<code>f64</code>) to a 64-bit …","Converts a vector of 64-bit floating point numbers (…","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Convert from a decimal string.","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","","","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","Multiplies two 256-bit integers to produce full 512-bit …","Gets the value of a specific bit in a specified SIMD …","Retrieves sections of a specified SIMD register as a …","Retrieves a value from a specified SIMD register based on …","Retrieves the value of a specified flags register.","Returns the size in bits of a given general-purpose …","Retrieves the value of a specified general-purpose …","Retrieves the value of a specified instruction pointer …","","","","","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this is zero.","Whether this is zero.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Low 2 words (u128)","Low 2 words (u128)","Conversion to u32","Conversion to u32","Low word (u64)","Low word (u64)","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Registers struct with initialized values.","Creates a new instance of <code>Memory</code>.","Creates a new CPU context with a specified memory base …","","","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","","","Fast exponentiation by squaring …","Fast exponentiation by squaring …","Reads a value of type <code>T</code> from memory starting at a given …","Reads a vector of values of type <code>T</code> from memory starting at …","","","","","","","","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Sets a specific bit in a specified SIMD register.","Sets sections of a specified SIMD register using a vector …","Sets a value in a specified SIMD register based on a …","Sets the value of a specified flags register.","Sets the value of a specified general-purpose register.","Sets the value of a specified instruction pointer (IP) …","","","","","","","","","","","","","","","","","","","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","","","","","","","","","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Little-endian large integer type 256-bit unsigned integer.","Converts a 32-bit unsigned integer (<code>u32</code>) to a 32-bit …","Converts a vector of 32-bit unsigned integers (<code>Vec&lt;u32&gt;</code>) …","Little-endian large integer type 512-bits unsigned integer.","Converts a 64-bit unsigned integer (<code>u64</code>) to a 64-bit …","Converts a vector of 64-bit unsigned integers (<code>Vec&lt;u64&gt;</code>) …","","","","","","","","","","","Writes a value of type <code>T</code> to memory starting at a given …","Writes a vector of values of type <code>T</code> to memory starting at …","Zero (additive identity) of this type.","Zero (additive identity) of this type."],"i":[15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,38,39,15,15,38,0,0,39,0,1,2,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,38,39,15,15,0,15,15,15,15,0,0,0,14,14,14,1,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,38,39,13,41,47,17,14,15,1,2,38,39,13,41,47,17,14,15,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,13,14,15,1,2,14,15,1,2,1,2,17,1,2,1,1,2,2,1,2,1,2,14,15,1,2,14,15,1,2,1,2,47,47,47,47,14,15,1,1,1,1,2,2,2,2,38,39,13,41,47,17,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,13,13,13,13,47,13,13,14,15,1,2,1,2,38,39,13,41,47,17,14,15,1,2,1,2,1,2,1,2,1,2,1,2,1,2,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,13,41,17,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,41,41,17,1,1,2,2,1,2,1,2,1,2,1,2,13,13,13,13,13,13,1,1,2,2,1,2,1,1,2,2,1,2,1,1,2,2,1,2,1,2,1,2,14,15,1,2,14,15,1,2,1,2,38,39,13,41,47,17,14,15,1,1,1,2,38,39,13,41,47,17,14,15,1,2,38,39,13,41,47,17,14,15,1,2,0,47,47,0,47,47,38,39,13,41,47,17,14,15,1,2,41,41,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[1,-1],1,[[3,[1]]]],[[1,-1],1,[[3,[1]]]],[[2,-1],2,[[3,[2]]]],[[2,-1],2,[[3,[2]]]],[[1,1],4],[[2,2],4],[1,[[6,[5]]]],[2,[[6,[5]]]],[1,7],[2,7],[1,8],[2,8],[1,5],[2,5],[1,9],[2,9],[[1,9],10],[[2,9],10],[[1,1],1],[[2,2],2],[[1,1],4],[[2,2],4],[[1,1],1],[[2,2],2],[[1,1],4],[[2,2],4],[1,9],[2,9],[[1,1],1],[[2,2],2],[[1,1],4],[[2,2],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,9],11],[[2,9],11],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[1,[[12,[1]]]],[2,[[12,[2]]]],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[[1,1],[[12,[1]]]],[[2,2],[[12,[2]]]],[[13,9],4],[14,14],[15,15],[1,1],[2,2],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,1],16],[[2,2],16],[[],17],[[],1],[[],2],[[1,-1],1,[[3,[1]]]],[[1,-1],1,[[3,[1]]]],[[2,-1],2,[[3,[2]]]],[[2,-1],2,[[3,[2]]]],[[1,-1],4,[[3,[1]]]],[[2,-1],4,[[3,[2]]]],[[1,1],[[4,[1,1]]]],[[2,2],[[4,[2,2]]]],[[14,14],10],[[15,15],10],[[1,1],10],[[2,2],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[9,1],[9,2],[18,8],[[[19,[18]]],[[19,[8]]]],[20,5],[[[19,[20]]],[[19,[5]]]],[[14,21],22],[[15,21],22],[[1,21],[[24,[4,23]]]],[[1,21],[[24,[4,23]]]],[[1,21],[[24,[4,23]]]],[[1,21],[[24,[4,23]]]],[[2,21],[[24,[4,23]]]],[[2,21],[[24,[4,23]]]],[[2,21],[[24,[4,23]]]],[[2,21],[[24,[4,23]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,1],[[[6,[11]]],1],[26,1],[1,1],[5,1],[8,1],[11,1],[9,1],[27,1],[28,1],[29,1],[[[30,[11]]],1],[31,1],[-1,-1,[]],[32,1],[33,1],[34,1],[[[30,[11]]],1],[7,1],[9,2],[[[30,[11]]],2],[28,2],[25,2],[33,2],[[[6,[11]]],2],[26,2],[[[30,[11]]],2],[5,2],[7,2],[8,2],[34,2],[1,2],[2,2],[31,2],[29,2],[32,2],[11,2],[-1,-1,[]],[27,2],[1,2],[[[6,[11]]],1],[[[6,[11]]],2],[27,[[24,[1,35]]]],[27,[[24,[2,35]]]],[[[6,[11]]],1],[[[6,[11]]],2],[27,[[24,[1]]]],[27,[[24,[2]]]],[[27,8],[[24,[1,36]]]],[[27,8],[[24,[2,36]]]],[[1,1],2],[[13,14,9,9],[[12,[10]]]],[[13,14,9],[[12,[[19,[-1]]]]],37],[[13,14,9,27],[[12,[-1]]],37],[[13,38],5],[15,9],[[13,15],5],[[13,39],5],[[14,-1],4,40],[[15,-1],4,40],[[1,-1],4,40],[[2,-1],4,40],[1,1],[2,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,10],[2,10],[1,8],[2,8],[1,7],[2,7],[1,8],[2,8],[1,5],[2,5],[[],1],[[],2],0,[[1,26],1],[[1,9],1],[[1,34],1],[[1,31],1],[[1,33],1],[[1,34],1],[[1,8],1],[[1,34],1],[[1,9],1],[[1,11],1],[[1,5],1],[[1,31],1],[[1,5],1],[[1,29],1],[[1,31],1],[[1,1],1],[[1,9],1],[[1,1],1],[[1,29],1],[[1,32],1],[[1,33],1],[[1,5],1],[[1,32],1],[[1,26],1],[[1,11],1],[[1,1],1],[[1,29],1],[[1,11],1],[[1,32],1],[[1,9],1],[[1,8],1],[[1,5],1],[[1,8],1],[[1,31],1],[[1,34],1],[[1,8],1],[[1,1],1],[[1,11],1],[[1,33],1],[[1,26],1],[[1,33],1],[[1,32],1],[[1,29],1],[[1,26],1],[[2,5],2],[[2,31],2],[[2,2],2],[[2,31],2],[[2,5],2],[[2,11],2],[[2,5],2],[[2,34],2],[[2,34],2],[[2,9],2],[[2,32],2],[[2,32],2],[[2,11],2],[[2,2],2],[[2,9],2],[[2,34],2],[[2,26],2],[[2,26],2],[[2,8],2],[[2,11],2],[[2,2],2],[[2,5],2],[[2,29],2],[[2,9],2],[[2,31],2],[[2,33],2],[[2,26],2],[[2,29],2],[[2,33],2],[[2,11],2],[[2,8],2],[[2,32],2],[[2,26],2],[[2,2],2],[[2,29],2],[[2,29],2],[[2,9],2],[[2,8],2],[[2,31],2],[[2,33],2],[[2,32],2],[[2,8],2],[[2,33],2],[[2,34],2],[[1,29],4],[[1,9],4],[[1,8],4],[[1,5],4],[[1,1],4],[[1,32],4],[[1,31],4],[[1,26],4],[[1,34],4],[[1,33],4],[[1,11],4],[[2,32],4],[[2,9],4],[[2,11],4],[[2,31],4],[[2,33],4],[[2,34],4],[[2,5],4],[[2,29],4],[[2,8],4],[[2,2],4],[[2,26],4],[[],13],[9,41],[9,17],[1,1],[2,2],[[],1],[[],2],[[1,1],[[4,[1,10]]]],[[2,2],[[4,[2,10]]]],[[1,1],[[4,[1,10]]]],[[2,2],[[4,[2,10]]]],[1,[[4,[1,10]]]],[2,[[4,[2,10]]]],[[1,1],[[4,[1,10]]]],[[2,2],[[4,[2,10]]]],[[1,1],[[4,[1,10]]]],[[2,2],[[4,[2,10]]]],[[1,1],[[12,[16]]]],[[2,2],[[12,[16]]]],[[1,1],1],[[2,2],2],[[41,9],-1,0],[[41,9,9],[[19,[-1]]],0],0,[[1,-1],1,[[3,[1]],42]],[[1,-1],1,[[3,[1]],42]],[[2,-1],2,[[3,[2]],42]],[[2,-1],2,[[3,[2]],42]],[[1,-1],4,[[3,[1]],42]],[[2,-1],4,[[3,[2]],42]],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[13,14,9,9,10],4],[[13,14,9,[19,[-1]]],10,37],[[13,14,9,27,-1],10,37],[[13,38,5],4],[[13,15,5],4],[[13,39,5],4],[[1,-1],1,[[3,[1]]]],[[1,-1],1,[[3,[1]]]],[[2,-1],2,[[3,[2]]]],[[2,-1],2,[[3,[2]]]],[[1,-1],4,[[3,[1]]]],[[2,-1],4,[[3,[2]]]],[[1,-1],1,[[3,[1]]]],[[1,-1],1,[[3,[1]]]],[[2,-1],2,[[3,[2]]]],[[2,-1],2,[[3,[2]]]],[[1,-1],4,[[3,[1]]]],[[2,-1],4,[[3,[2]]]],[[1,-1],1,[[3,[1]]]],[[1,-1],1,[[3,[1]]]],[[2,-1],2,[[3,[2]]]],[[2,-1],2,[[3,[2]]]],[[1,1],4],[[2,2],4],[[1,[6,[11]]],4],[[2,[6,[11]]],4],[[1,[6,[11]]],4],[[2,[6,[11]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[-1,43,[]],[1,8],[2,8],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[2,[[24,[1,44]]]],[2,[[24,[1,44]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],0,[8,18],[[[19,[8]]],[[19,[18]]]],0,[5,20],[[[19,[5]]],[[19,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[41,9,-1],4,0],[[41,9,[19,[-1]]],4,[0,46]],[[],1],[[],2]],"c":[],"p":[[3,"u256",0],[3,"u512",0],[8,"Into",535],[15,"tuple"],[15,"u64"],[15,"slice"],[15,"u128"],[15,"u32"],[15,"usize"],[15,"bool"],[15,"u8"],[4,"Option",536],[3,"Registers",0],[4,"VecRegName",0],[4,"GPRName",0],[4,"Ordering",537],[3,"CPU",0],[15,"f32"],[3,"Vec",538],[15,"f64"],[3,"Formatter",539],[6,"Result",539],[3,"Error",539],[4,"Result",540],[3,"U128",541],[15,"i8"],[15,"str"],[15,"i128"],[15,"i64"],[15,"array"],[15,"isize"],[15,"i32"],[15,"u16"],[15,"i16"],[4,"FromDecStrErr",542],[3,"FromStrRadixErr",542],[8,"SectionCompatible",0],[4,"FLAGSName",0],[4,"IPName",0],[8,"Hasher",543],[3,"Memory",0],[8,"Copy",544],[3,"String",545],[4,"Error",541],[3,"TypeId",546],[8,"Clone",547],[3,"Utilities",0]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
